[gcode_macro CALIBRATE]
description:  Calibrate the printer flow or pressure advance
gcode: 	
	{% set TYPE = params.TYPE|default("")|string %}
	
	{% set BED_TEMP = params.BED_TEMP|default(110)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
	{% set MATERIAL = params.MATERIAL|default("ABS")|string %}
	
	{% if TYPE=="" %}
	{action_respond_info("Please call this macro using TYPE= \"flow\" or \"pressure_advance\"")}
	{action_raise_error("not enough parameters to start a calibration!")}
	
	{% elif TYPE=="flow" %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=130_130_170_170
	FLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471
	
	{% elif TYPE=="pressure_advance" %}
	
	
	START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=90_90_210_210
	PRESSURE_ADVANCE_CALIBRATION
	
	{% endif %}
	
	END_PRINT FILTER_TIME=0

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description:  Calibrate the pressure advance by printing a grid pattern
gcode: 	
	{% set pa_start     = params.START|default(0.02)|float %}
	{% set pa_increment = params.INCREMENT|default(0.005)|float %}
	
	{% set do_raft = params.RAFT|default(1)|int %}
	
	{% set print_size      = params.SIZE|default(120)|int %}
	{% set num_bands       = params.BANDS_LIMIT|default(999)|int %}
	{% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}
	{% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},
	{% set retract_length  = params.RETRACT|default(0.6)|float %}
	{% set initial_purge   = params.PURGE_MM|default(8)|int %}
	
	{% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}
	{% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}
	{% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}
	{% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}
	{% set feedrate_z       = 5 * 60 %}
	{% set feedrate_retract = 50 * 60 %}
	
	{% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}
	{% set spacing_band  = 2 %}
	{% set spacing_raft  = 2 %}
	
	{% set fast_line_ratio_percent = 50 %}
	
	{% set lines_per_band    = [2, lines_per_band]|max %}
	{% set e_multiplier      = [1, e_multiplier]|max %}
	{% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
	{% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
	{% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
	{% set line_width    = nozzle_diameter * 1.25 %}
	{% set line_height   = nozzle_diameter / 2 %}
	{% set z_hop_height  = 2 * line_height %}
	{% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %}
	{% set spacing_purge = line_height * 0.8 %}
	
	{% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}
	{% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
	{% set print_width    = num_raft_lines * spacing_raft %}
	
	{% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
	{% set bands_per_height = (([print_size, max_y]|min  - spacing_purge) / band_height)|round(0, 'floor')|int %}
	{% set num_bands        = [num_bands, bands_per_height]|min %}
	{% set print_height     = num_bands * band_height - spacing_band - spacing_purge %}
	
	{% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}
	{% set fast_line_length = print_width - slow_line_length * 2 %}
	{% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
	{% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
	
	{% set x_start = max_x / 2 - print_width  / 2 %}
	{% set y_start = max_y / 2 - print_height / 2 %}
	
	{action_respond_info("")}
	{action_respond_info("Starting Pressure Advance calibration print.")}
	{action_respond_info("")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button once the print starts exhibiting PA values that are obviously too high.")}
	{action_respond_info("")}
	{action_respond_info("PA of first band: %.4f" % pa_start)}
	{action_respond_info("PA of last band: %.4f" % (num_bands * pa_increment))}
	{action_respond_info("PA increment per band: %.4f" % pa_increment)}
	{action_respond_info("Number of bands: %d" % num_bands)}
	{action_respond_info("")}
	{action_respond_info("Inspect the printed model. "
	"Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "
	"Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "
	"Your final Pressure Advance value would then be:"
	)}
	{action_respond_info("")}
	{action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
	{action_respond_info("")}
	{action_respond_info("Update your [extruder] config section and set \"pressure_advance\" to the value you calculated.")}
	{action_respond_info("")}
	
	
	
	
	
	
	
	
	
	SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
	{% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
	SET_PRESSURE_ADVANCE ADVANCE={pa_start}
	
	
	
	
	M117 Priming
	G90
	G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}
	G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}
	G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}
	
	
	
	
	{% if do_raft == 1 %}
	G0 F{feedrate_raft}
	
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	{% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
	G1 X{line_width} E{line_width * e_per_mm}
	{% endif %}
	
	G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
	
	
	{% if not loop.last %}
	{% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
	G1 X{horizontal_move} E{horizontal_move * e_per_mm}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	{% endif %}
	
	
	
	
	M117 Printing bands
	G90
	G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}
	G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}
	G91
	G1 E{retract_length} F{feedrate_retract}
	
	
	{% for curr_band_num in range(1, num_bands + 1) %}
	{% set outer_loop = loop %}
	
	{% set curr_pa_value = pa_start + (curr_band_num - 1) * pa_increment %}
	SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}
	M117 Band {curr_band_num} PA {curr_pa_value|round(4)}
	
	
	{% for _ in range(num_lines_control) %}
	G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}
	
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endfor %}
	
	
	{% for _ in range(num_lines_test) %}
	{% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
	G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	{% if not (outer_loop.last and loop.last) %}
	G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}
	G0 Z-{z_hop_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z20 F{feedrate_z}
	G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}
	
	M117
	SET_PRESSURE_ADVANCE ADVANCE={pa_saved}
	RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION

[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode: 	
	{% set do_raft = params.DO_RAFT|default(1)|int %}
	{% set do_retract = params.DO_RECTRACT|default(0)|int %}
	{% set print_size = params.SIZE|default(40)|int %}
	{% set print_height = params.HEIGHT|default(15)|int %}
	{% set corner_radius = params.CORNER_RADIUS|default(8)|int %}
	{% set number_of_perimeters = params.PERIMETERS|default(2)|int %}
	{% set fan_speed = params.FAN_SPEED|default(20)|int %}
	
	{% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(0.93)|float %}
	{% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %}
	{% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %}
	{% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
	
	{% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %}
	{% set initial_purge = params.PURGE_MM|default(1)|int %}
	{% set z_hop_height  = 2 * layer_height %}
	
	{% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %}
	{% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %}
	{% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %}
	{% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %}
	{% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %}
	
	
	
	
	{% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %}
	{% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %}
	{% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %}
	
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x_start = max_x / 2 - print_size / 2 %}
	{% set y_start = max_y / 2 - print_size / 2 %}
	{% set x_end = x_start + print_size %}
	{% set y_end = y_start + print_size %}
	
	{% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
	{% set raft_size = num_raft_lines * spacing %}
	
	
	
	
	{action_respond_info("")}
	{action_respond_info("Starting extrusion flow calibration print")}
	{action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
	{action_respond_info("")}
	{action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
	{action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
	{action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
	{action_respond_info("")}
	{action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_respond_info("")}
	
	SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION
	
	
	
	
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
	SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}
	
	
	
	
	G90
	M83
	G92 E0.0
	G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel}
	
	G91
	G1 E{initial_purge} F{5 * 60}
	G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2}
	G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2}
	G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	
	G90
	G0 X{x_start} Y{y_start} F{feedrate_travel}
	G1 Z{layer_height} F{feedrate_z}
	G1 E{retract_length} F{feedrate_retract}
	
	
	
	
	{% if do_raft == 1 %}
	G91
	{% for curr_raft_line in range(1, num_raft_lines + 2) %}
	
	G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm * e_multiplier} F{feedrate_raft}
	
	
	{% if not loop.last %}
	G1 X{spacing} E{spacing * e_per_mm * e_multiplier} F{feedrate_raft}
	{% endif %}
	{% endfor %}
	
	G1 E-{retract_length} F{feedrate_retract}
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	
	
	
	
	G90
	M106 S{fan_speed * 255 / 100}
	
	
	{% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
	G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel}
	G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z}
	
	
	{% for perim_num in range(number_of_perimeters) %}
	
	{% set perim_offset = perim_num * spacing %}
	{% set perim_radius = corner_radius - (perim_num * spacing) %}
	
	
	G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
	{% if do_retract == 1 %}
	G1 E{retract_length} F{feedrate_retract}
	{% endif %}
	
	
	G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
	G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
	G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
	G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
	G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
	G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
	G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm * e_multiplier} F{feedrate_print}
	G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm * e_multiplier} F{feedrate_print}
	
	{% if do_retract == 1 %}
	G1 E-{retract_length} F{feedrate_retract}
	{% endif %}
	{% endfor %}
	
	{% if do_retract == 1 %}
	G91
	G0 Z{z_hop_height} F{feedrate_z}
	G90
	{% endif %}
	{% endfor %}
	
	
	
	
	G1 E-{retract_length} F{feedrate_retract}
	G91
	G0 Z20 F{feedrate_travel}
	
	RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description:  Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode: 
	{% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %}
	{% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %}
	{% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %}
	
	
	{% if evalue == 0.0 %}
	{% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
	
	
	{% if last_evalue == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_evalue = last_evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f % final_evalue")}
	{% endif %}
	{% else %}
	{% set final_evalue = evalue %}
	{action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f % final_evalue")}
	{% endif %}
	
	
	{% if theorical_thickness == 0.0 %}
	{% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}
	
	
	{% if last_shell_thickness == 0.0 %}
	{action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
	{action_respond_info("You can still manually use it by calling again this macro like that:")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set final_theorical_thickness = last_shell_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f % final_theorical_thickness")}
	{% endif %}
	{% else %}
	{% set final_theorical_thickness = theorical_thickness %}
	{action_respond_info("Using THEORICAL_THICKNESS: %.3f % final_theorical_thickness")}
	{% endif %}
	
	
	{% if measured_thickness == 0.0 %}
	{action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
	{action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
	{action_raise_error("not enough data to perform the computation of the new flow !")}
	{% else %}
	{% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
	{action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
	{action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
	{action_respond_info("")}
	{% endif %}



[gcode_macro TEST_SPEED]
gcode: 	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode: 
	{% set search = params.S|lower %}
	{% set ns = namespace() %}
	{% for item in printer  %}
	{% if ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if search in ns.path|lower %}
	{ action_respond_info(ns.path|join) }
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	
	{% if ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{ loop(child.items()) }
	{% else %}
	{% if search in ns.path|lower %}
	{ action_respond_info("%s : %s" % (ns.path|join, child)) }
	{% endif %}
	{% endif %}
	
	{% endfor %}
	{% endif %}
	{% endfor %}
